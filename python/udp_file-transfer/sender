#!/usr/bin/python3

from socket import *
import sys, time

class ClientService(object):
	# sender as client
	def __init__(self, ServerIP, ServerPort):
		self.ServerIP = ServerIP
		self.ServerPort = ServerPort
	def CreateSockfd(self):
		try:
			# create UDP socket
			self.UDPsockfd = socket(AF_INET, SOCK_DGRAM)
		except Exception as err:
			print(f"[x] E: {err}")
			exit(-1)
	def UDPSender(self, FileName):
		sockfd, block = self.UDPsockfd, 0
		sockfd.sendto(b'1', (self.ServerIP, self.ServerPort))
		try:
			ffd = open(FileName, "rb")
		except Exception as err:
			print(f"E: {err}")
			self.Close()
			exit(-1)
		while True:
			datagram = ffd.read(1024)
			if not datagram:
				break
			sockfd.sendto(datagram, (self.ServerIP, self.ServerPort))
			print(f" Send {len(datagram)} bytes, #{block} of file.")
			block += 1
			time.sleep(0.05)
		print("Finish read file.")
		ffd.close()
	def Close(self):
		self.UDPsockfd.close()	
def main():
	if len(sys.argv) != 4:
		print(f"Usage:\n {sys.argv[0]} <Server IP> <Server Port> <FileName>")
		exit(-1)
	try:
		ServerIP, ServerPort, FileName = sys.argv[1], int(sys.argv[2]), sys.argv[3]
	except ValueError:
		print(f"E: {ServerPort} isn't a valid port number.")
		exit(-1)
	CliSer = ClientService(ServerIP, ServerPort)
	CliSer.CreateSockfd() # create UDP socket
	
	CliSer.UDPSender(FileName)
	
	CliSer.Close()
if __name__ == "__main__":
	main()